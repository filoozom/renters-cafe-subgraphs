type Cafe @entity {
  # Contract address
  id: ID!

  # Addresses
  rent: Bytes!
  rewarder: Bytes!
  devAddress: Bytes!
  feeAddress: Bytes!

  # Constants
  bonusMultiplier: BigInt!
  accRentPrecision: BigInt!
  withdrawFeePrecision: BigInt!
  maxWithdrawFee: BigInt!

  # Emission config
  startTimestamp: BigInt!
  totalAllocation: BigInt!
  bonusEndTimestamp: BigInt!
  rentPerSecond: BigInt!

  # Pools
  pools: [Pool!]! @derivedFrom(field: "cafe")
  poolCount: BigInt!

  # Metadata
  timestamp: BigInt!
  block: BigInt!
}

type Pool @entity {
  id: ID!
  cafe: Cafe!
  lp: LP!

  # Type
  type: String!

  # Configuration
  token: Bytes!
  allocation: BigInt!
  withdrawFee: Int

  # State
  lastRewardTimestamp: BigInt!
  accRentPerShare: BigInt!
  balance: BigInt!
  total: BigInt!

  # Users
  userCount: BigInt!
  users: [User!]! @derivedFrom(field: "pool")

  # Stats
  rentHarvested: BigInt!
  feesCollected: BigInt!

  # Metadata
  timestamp: BigInt!
  block: BigInt!
}

type User @entity {
  id: ID!

  # User
  address: Bytes!
  pool: Pool!

  # State
  balance: BigInt!
  total: BigInt!
  debt: BigInt!
  rentHarvested: BigInt!

  # Stats
  feesPaid: BigInt!

  # Metadata
  timestamp: BigInt!
  block: BigInt!
}

type LP @entity {
  id: ID!
  pool: Pool!

  # Configuration
  symbol: String!
  name: String!

  # Metadata
  timestamp: BigInt!
  block: BigInt!
}

type StealablePropertiesFactory @entity {
  id: ID!

  # Constants
  multiplierPrecision: BigInt!

  # Properties
  properties: [StealableProperty!]! @derivedFrom(field: "factory")

  # Configuration
  uri: String!
  paused: Boolean!

  # Metadata
  timestamp: BigInt!
  block: BigInt!
}

type StealableProperty @entity {
  id: ID!
  factory: StealablePropertiesFactory!

  # Properties
  cap: BigInt!
  minted: BigInt!
  multiplier: BigInt!
  bonus: BigInt!
  protection: BigInt!
  pools: [Pool!]!

  # Steal
  startRatio: BigInt!
  endRatio: BigInt!
  duration: BigInt!
  keepRatio: BigInt!

  # Upstream mints
  stealMints: BigInt!
  stealMintsDone: BigInt!

  # Stats
  timesStolen: BigInt!

  # Owners
  owners: [StealablePropertyOwner!]!

  # Metadata
  timestamp: BigInt!
  block: BigInt!
}

type StealablePropertyOwner @entity {
  id: ID!
  property: StealableProperty!
  user: Bytes!

  # Data
  since: BigInt!
  price: BigInt!

  # Derived
  protectedUntil: BigInt!

  # Metadata
  timestamp: BigInt!
  block: BigInt!
}

type PropertyAuctionFactory @entity {
  id: ID!
  stealableProperties: StealablePropertiesFactory!

  # Properties
  auctions: [PropertyAuction!]! @derivedFrom(field: "factory")

  # Configuration
  cuts: [PropertyAuctionCut!]! @derivedFrom(field: "factory")

  # Metadata
  timestamp: BigInt!
  block: BigInt!
}

type PropertyAuctionCut @entity {
  id: ID!
  factory: PropertyAuctionFactory!

  # Configuration
  user: Bytes!
  amount: BigInt!

  # Metadata
  timestamp: BigInt!
  block: BigInt!
}

type PropertyAuction @entity {
  id: ID!
  factory: PropertyAuctionFactory!

  # Properties
  content: [PropertyAuctionContent!]! @derivedFrom(field: "auction")

  # Configuration
  startPrice: BigInt!
  endPrice: BigInt!
  duration: BigInt!
  startTimestamp: BigInt!
  totalWeights: BigInt!

  # State
  done: Boolean!
  priceWon: BigInt!

  # Metadata
  timestamp: BigInt!
  block: BigInt!
}

type PropertyAuctionContent @entity {
  id: ID!

  # Configuration
  auction: PropertyAuction!
  property: StealableProperty!
  count: BigInt!
  weight: BigInt!

  # Metadata
  timestamp: BigInt!
  block: BigInt!
}
